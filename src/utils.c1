#use <string>

bool u_is_keyword(string word) {
    return string_equal(word, "int")
        || string_equal(word, "bool")
        || string_equal(word, "string")
        || string_equal(word, "char")
        || string_equal(word, "void")
        || string_equal(word, "struct")
        || string_equal(word, "typedef")
        || string_equal(word, "if")
        || string_equal(word, "else")
        || string_equal(word, "while")
        || string_equal(word, "for")
        || string_equal(word, "continue")
        || string_equal(word, "break")
        || string_equal(word, "return")

        // treat `assert` as normal function as all params are EXP
        // || string_equal(word, "assert")

        // treat `error` as normal function as all params are EXP
        // || string_equal(word, "error")

        || string_equal(word, "alloc")
        || string_equal(word, "alloc_array");
}

bool u_is_literal(string word) {
    return string_equal(word, "true")
        || string_equal(word, "false")
        || string_equal(word, "NULL");
}

bool u_is_token_type(char type) {
    return type == 'A' || type == 'I' || type == 'K'
        || type == 'L' || type == 'S' || type == 'O';
}

bool u_is_native_type(string word) {
    return string_equal(word, "int")
        || string_equal(word, "bool")
        || string_equal(word, "string")
        || string_equal(word, "char")
        || string_equal(word, "void");
}

bool u_is_asn_op(string word) {
    return string_equal(word, "=")
        || string_equal(word, "+=")
        || string_equal(word, "-=")
        || string_equal(word, "*=")
        || string_equal(word, "/=")
        || string_equal(word, "%=")
        || string_equal(word, "<<=")
        || string_equal(word, ">>=")
        || string_equal(word, "&=")
        || string_equal(word, "^=")
        || string_equal(word, "|=");
}

string u_tok_type_to_readable(char type)
//@requires u_is_token_type(type);
{
    if (type == 'A') return "assignment operator";
    else if (type == 'I') return "identifier";
    else if (type == 'K') return "keyword";
    else if (type == 'L') return "literal";
    else if (type == 'S') return "separator";
    else if (type == 'O') return "operator";

    error(format("Sanity Check: unknown token type '%c'", type));
}
