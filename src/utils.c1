#use <string>

struct u_pos_t {
    int start_row;
    int start_col;
    int end_row;
    int end_col;
};
typedef struct u_pos_t u_pos_t;

bool u_is_keyword(string word) {
    return string_equal(word, "int")
        || string_equal(word, "bool")
        || string_equal(word, "string")
        || string_equal(word, "char")
        || string_equal(word, "void")
        || string_equal(word, "struct")
        || string_equal(word, "typedef")
        || string_equal(word, "if")
        || string_equal(word, "else")
        || string_equal(word, "while")
        || string_equal(word, "for")
        || string_equal(word, "continue")
        || string_equal(word, "break")
        || string_equal(word, "return")
        || string_equal(word, "assert")
        || string_equal(word, "error")
        || string_equal(word, "alloc")
        || string_equal(word, "alloc_array");
}

bool u_is_literal(string word) {
    return string_equal(word, "true")
        || string_equal(word, "false")
        || string_equal(word, "NULL");
}

bool u_is_unary(string word) {
    return string_equal(word, "!")
        || string_equal(word, "~")
        || string_equal(word, "-")
        || string_equal(word, "*");
}

bool u_is_token_type(char type) {
    return type == 'A' || type == 'I' || type == 'K'
        || type == 'L' || type == 'S' || type == 'O';
}

bool u_is_native_type(string word) {
    return string_equal(word, "int")
        || string_equal(word, "bool")
        || string_equal(word, "string")
        || string_equal(word, "char")
        || string_equal(word, "void");
}

// bool u_is_asn_op(string word) {
//     return string_equal(word, "=")
//         || string_equal(word, "+=")
//         || string_equal(word, "-=")
//         || string_equal(word, "*=")
//         || string_equal(word, "/=")
//         || string_equal(word, "%=")
//         || string_equal(word, "<<=")
//         || string_equal(word, ">>=")
//         || string_equal(word, "&=")
//         || string_equal(word, "^=")
//         || string_equal(word, "|=");
// }

bool u_is_hex(string num) {
    return string_length(num) >= 3 && string_charat(num, 0) == '0'
        && (string_charat(num, 1) == 'x' || string_charat(num, 1) == 'X');
}

string u_tok_type_to_readable(char type)
//@requires u_is_token_type(type);
{
    if (type == 'A') return "assignment operator";
    else if (type == 'I') return "identifier";
    else if (type == 'K') return "keyword";
    else if (type == 'L') return "literal";
    else if (type == 'S') return "separator";
    else if (type == 'O') return "operator";

    error(format("Sanity Check: unknown token type '%c'", type));
}

bool u_is_c0_lib(string lib) {
    return string_equal(lib, "rand") || string_equal(lib, "util");
}

bool u_is_native_lib(string lib) {
    return string_equal(lib, "conio")
        || string_equal(lib, "file")
        || string_equal(lib, "args")
        || string_equal(lib, "parse")
        || string_equal(lib, "string")
        || string_equal(lib, "img");
}
