struct fr_file_t {
    bool is_native;

    // compilation artifacts
    string path;
    string prog;
    vec_t *tokens;
    ast_program_t *ast;

    // additional info
    vec_t *libs;
};
typedef struct fr_file_t fr_file_t;

u_pos_t *fr_create_pos(int start_r, int start_c, int end_r, int end_c) {
    u_pos_t *pos = alloc(u_pos_t);
    pos->start_row = start_r;
    pos->start_col = start_c;
    pos->end_row = end_r;
    pos->end_col = end_c;

    return pos;
}

u_pos_t *fr_merge_pos(u_pos_t *a, u_pos_t *b)
/*@requires a->start_row == b->end_row && a->start_col <= b->start_col ||
            a->start_row < b->end_row;
@*/
{
    u_pos_t *pos = alloc(u_pos_t);
    pos->start_row = a->start_row;
    pos->start_col = a->start_col;
    pos->end_row = b->end_row;
    pos->end_col = b->end_col;

    return pos;
}

bool fr_is_valid_pos(u_pos_t *pos) {
    return pos != NULL
        && pos->start_row > 0 && pos->start_col > 0
        && (pos->end_row == pos->start_row && pos->end_col >= pos->start_col
        || pos->end_row > pos->start_row);
}

bool fr_has_pos_type(ast_type_t *type)
//@requires type != NULL;
{
    return fr_is_valid_pos(type->pos);
}

bool fr_has_pos_exp(ast_exp_t *exp)
//@requires exp != NULL;
{
    return fr_is_valid_pos(exp->pos);
}

bool fr_has_pos_stmt(ast_stmt_t *stmt)
//@requires stmt != NULL;
{
    return fr_is_valid_pos(stmt->pos);
}

bool fr_has_pos_func(ast_func_t *func)
//@requires func != NULL;
{
    return fr_is_valid_pos(func->pos);
}

bool fr_has_pos_strct(ast_struct_t *strct)
//@requires strct != NULL;
{
    return fr_is_valid_pos(strct->pos);
}

bool fr_has_pos_alias(ast_alias_t *alias)
//@requires alias != NULL;
{
    return fr_is_valid_pos(alias->pos);
}
