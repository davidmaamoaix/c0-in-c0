ast_type_t *t_deref_alias(s_glob_ctx_t *gctx, ast_type_t *type)
//@requires __s_is_glob_ctx(gctx);
//@requires type != NULL;
{
    ast_type_t *prev = type;
    while (type != NULL && type->type == 'D')
    //@loop_invariant prev != NULL;
    {
        prev = type;
        type = (ast_type_t *) om_get_s(gctx->aliases, type->iden);
    }

    return type;
}

// BEGIN soft checks

// does not check for whether a struct is defined (i.e. not forward declared);
// that is checked on use sites of `alloc` while calculating allocation size
e_error_t *t_is_valid_type(
    s_glob_ctx_t *gctx, ast_type_t *type, bool allow_void
)
//@requires __s_is_glob_ctx(gctx);
//@requires type != NULL;
{
    if (
        type->type == 'I' || type->type == 'B' ||
        type->type == 'S' || type->type == 'C'
    ) return NULL;

    if (type->type == 'V') {
        return allow_void ? NULL : e_create_error(
            33, "void type only allowed in function return type",
            type->pos
        );
    }

    if (type->type == 'D') {
        ast_type_t *actual = t_deref_alias(gctx, type);
        if (actual == NULL) {
            return e_create_error(
                22,
                format("undefined typedef \"%s\"", type->iden),
                type->pos
            );
        }

        return t_is_valid_type(gctx, actual, allow_void);
    }

    if (type->type == 'X') {
        if (!om_has_s(gctx->strcts, type->iden)) {
            return e_create_error(
                21,
                format("undefined struct \"%s\"", type->iden),
                type->pos
            );
        }

        return NULL;
    }

    if (type->type == 'A' || type->type == 'P') {
        // type of a `NULL` literal
        if (type->type == 'P' && type->content == NULL) return NULL;

        return t_is_valid_type(gctx, type->content, false);
    }

    error("not implemented type");
}

// requires `type` to be a valid type
bool t_is_small_type(s_glob_ctx_t *gctx, ast_type_t *type)
//@requires __s_is_glob_ctx(gctx);
//@requires t_is_valid_type(gctx, type, true) == NULL;
{
    ast_type_t *actual = t_deref_alias(gctx, type);
    //@assert actual != NULL;

    return actual->type == 'I' || actual->type == 'B'
        || actual->type == 'C' || actual->type == 'S'
        || actual->type == 'A' || actual->type == 'P';
}

// requires `expect` and `real` to be valid types
bool t_match_type(s_glob_ctx_t *gctx, ast_type_t *expect, ast_type_t *real)
//@requires __s_is_glob_ctx(gctx);
//@requires t_is_valid_type(gctx, expect, true) == NULL;
//@requires t_is_valid_type(gctx, real, true) == NULL;
{
    expect = t_deref_alias(gctx, expect);
    real = t_deref_alias(gctx, real);
    
    //@assert expect->type != 'D';
    //@assert real->type != 'D';

    if (expect->type != real->type) return false;

    if (expect->type == 'X') {
        return string_equal(expect->iden, real->iden);
    } else if (expect->type == 'A') {
        return t_match_type(gctx, expect->content, real->content);
    } else if (expect->type == 'P') {
        // a `NULL` literal matches any pointer type
        if (real->content == NULL) return true;

        return t_match_type(gctx, expect->content, real->content);
    } else {
        return true;
    }
}

// END soft checks

// BEGIN type assertions

// only used for AST type
bool t_assert_valid_type(s_glob_ctx_t *gctx, ast_type_t *type, bool allow_void)
//@requires __s_is_glob_ctx(gctx);
//@requires type != NULL;
{
    gctx->err = t_is_valid_type(gctx, type, allow_void);
    return !s_has_err(gctx);
}

// only used for AST type
bool t_assert_small_type(s_glob_ctx_t *gctx, ast_type_t *type)
//@requires __s_is_glob_ctx(gctx);
//@requires t_is_valid_type(gctx, type, true) == NULL;
{
    if (!t_is_small_type(gctx, type)) {
        s_set_err_at(gctx, 32, "expected small type", type->pos);
        return false;
    }

    return true;
}

bool t_assert_match_type(
    s_glob_ctx_t *gctx, ast_type_t *expect, ast_type_t *real, u_pos_t *pos
)
//@requires __s_is_glob_ctx(gctx);
//@requires t_is_valid_type(gctx, expect, true) == NULL;
//@requires t_is_valid_type(gctx, real, true) == NULL;
{
    if (!t_match_type(gctx, expect, real)) {
        // TODO: get a AST_TO_STRING function for better error message
        s_set_err_at(gctx, 31, "type msimatch", pos);
        return false;
    }

    return true;
}

// END type assertions

// BEGIN exp type check

// populates the `type` 
bool t_check_term(s_glob_ctx_t *gctx, ast_exp_t *term)
//@requires __s_is_glob_ctx(gctx);
//@ensures xor(\result, e_has_err(gctx->err));
{
    ast_type_t *type = alloc(ast_type_t);
    if (term->type == 'I') type->type = 'I';
    else if (term->type == 'C') type->type = 'C';
    else if (term->type == 'S') type->type = 'S';
    else if (term->type == 'B') type->type = 'S';
    else if (term->type == 'N') type->type = 'S';
    else if (term->type == 'D') type->type = 'S';
    else { error("unimplemented type"); }

    term->etype = type;
    return true;
}

// END exp type check
