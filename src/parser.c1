#use <parse>

struct p_ctx_t {
    // file info
    string file_path;

    // declarative information
    om_map_t *types;
    vec_t *libs;

    // token tracking
    int n_tokens;
    int pc;
    l_token_t *[] tokens;

    // error handling (propagate instead of throwing)
    e_error_t *err;
};
typedef struct p_ctx_t p_ctx_t;

// BEGIN contracts

bool __p_is_ctx(p_ctx_t *ctx) {
    if (ctx == NULL) return false;
    if (!__om_is_valid_tree(ctx->types)) return false;
    
    if (ctx->n_tokens < 0) return false;
    if (!(0 <= ctx->pc && ctx->pc <= ctx->n_tokens)) return false;
    if (!v_is_vector(ctx->libs)) return false;
    //@assert ctx->n_tokens <= \length(ctx->tokens);

    return true;
}

bool __p_is_eof(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    return ctx->pc == ctx->n_tokens;
}

// END contracts

// BEGIN constructors

p_ctx_t *p_create_ctx(vec_t *tokens, om_map_t *type_ctx)
//@ensures __p_is_ctx(\result);
{
    p_ctx_t *ctx = alloc(p_ctx_t);
    ctx->types = type_ctx;
    ctx->libs = v_create_vector();

    ctx->n_tokens = v_length(tokens);
    ctx->tokens = alloc_array(l_token_t *, ctx->n_tokens);
    for (int i = 0; i < ctx->n_tokens; i++) {
        ctx->tokens[i] = (l_token_t *) v_get(tokens, i);
    }

    return ctx;
}

// END constructors

// BEGIN shorthands

// hacky "get-last-token-to-assign-the-referencing-position-of-each-AST"
fr_pos_t *__p_last_pos(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx) && ctx->pc > 0;
{
    return ctx->tokens[ctx->pc - 1]->pos;
}

void __p_set_err(p_ctx_t *ctx, string msg);
void __p_set_err_at(p_ctx_t *ctx, string msg, l_token_t *tok);
void __p_eof_err(p_ctx_t *ctx);
bool __p_expect(char type, string word, p_ctx_t *ctx);
bool __p_expect_kw(string kwd, p_ctx_t *ctx);
bool __p_expect_sep(string sep, p_ctx_t *ctx);
l_token_t *__p_peek(p_ctx_t *ctx);
l_token_t *__p_next(p_ctx_t *ctx);
bool __p_can_be_var(string var, p_ctx_t *ctx);

void __p_set_err(p_ctx_t *ctx, string msg)
//@requires __p_is_ctx(ctx);
//@requires !e_has_err(ctx->err);
//@ensures e_has_err(ctx->err);
{
    fr_pos_t *pos = NULL;
    if (!__p_is_eof(ctx)) {
        l_token_t *curr = __p_peek(ctx);
        pos = curr->pos;
    }

    e_error_t *err = e_create_error(msg, pos);
    ctx->err = err;
}

void __p_set_err_at(p_ctx_t *ctx, string msg, l_token_t *tok)
//@requires __p_is_ctx(ctx);
//@requires !e_has_err(ctx->err);
//@ensures e_has_err(ctx->err);
{
    ctx->err = e_create_error(msg, tok->pos);
}

void __p_eof_err(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !e_has_err(ctx->err);
//@ensures e_has_err(ctx->err);
{
    __p_set_err(ctx, "unexpected end of file");
}

bool __p_match(l_token_t *tok, char type, string word) {
    return tok->type == type && string_equal(tok->str, word);
}

bool __p_expect(char type, string word, p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires u_is_token_type(type);
//@ensures \result && !e_has_err(ctx->err) || !\result && e_has_err(ctx->err);
{
    if (__p_is_eof(ctx)) {
        __p_eof_err(ctx);
        return false;
    }

    l_token_t *tok = ctx->tokens[ctx->pc];
    ctx->pc++;

    if (!__p_match(tok, type, word)) {
        string err_msg = format(
            "expecting %s \"%s\", got %s \"%s\"",
            u_tok_type_to_readable(type), word,
            u_tok_type_to_readable(tok->type), tok->str
        );
        __p_set_err_at(ctx, err_msg, tok);

        return false;
    }

    return true;
}

bool __p_expect_kw(string kwd, p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@ensures \result && !e_has_err(ctx->err) || !\result && e_has_err(ctx->err);
{
    return __p_expect('K', kwd, ctx);
}

bool __p_expect_sep(string sep, p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@ensures \result && !e_has_err(ctx->err) || !\result && e_has_err(ctx->err);
{
    return __p_expect('S', sep, ctx);
}

l_token_t *__p_expect_id_tok(p_ctx_t *ctx, bool is_var)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx) || __p_peek(ctx)->type != 'I') {
        __p_set_err(ctx, "expecting identifier");
        return NULL;
    }
    l_token_t *tok = __p_next(ctx);
    if (is_var && !__p_can_be_var(tok->str, ctx)) {
        __p_set_err_at(
            ctx,
            format("expecting variable/function name, not \"%s\"", tok->str),
            tok
        );
        return NULL;
    }
    return tok;
}

l_token_t *__p_peek(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
{
    return ctx->tokens[ctx->pc];
}

l_token_t *__p_next(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
{
    l_token_t *tok = ctx->tokens[ctx->pc];
    ctx->pc++;
    return tok;
}

// if an identifier can be a variable OR function name
bool __p_can_be_var(string var, p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    return !om_has_s(ctx->types, var);
}

bool __p_is_type_name(string name, p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    return om_has_s(ctx->types, name);
}

vec_t *__p_convert_stmt_to_block(ast_stmt_t *stmt)
//@requires stmt != NULL;
//@ensures v_is_vector(\result);
{
    if (stmt->type == 'B') return stmt->blk_a;

    vec_t *res = v_create_vector();
    v_append(res, (void *) stmt);
    return res;
}

// END shorthands

// BEGIN fsets

// firset-set of left-recursion eliminated rule of TYPE
bool __p_fset_typel(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx)) return false;

    l_token_t *tok = __p_peek(ctx);
    return __p_match(tok, 'S', "[") || __p_match(tok, 'O', "*");
}

bool __p_fset_type(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx)) return false;

    l_token_t *tok = __p_peek(ctx);
    string word = tok->str;
    if (tok->type == 'K') {
        return u_is_native_type(word) || string_equal(word, "struct");
    }

    // check type definitions for `struct <word>`
    if (tok->type == 'I') {
        return __p_is_type_name(tok->str, ctx);
    }

    return false;
}

bool __p_fset_exp(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx)) return false;

    l_token_t *tok = __p_peek(ctx);
    if (__p_match(tok, 'S', "(")) return true;
    if (tok->type == 'L') return true;
    if (tok->type == 'I' && __p_can_be_var(tok->str, ctx)) return true;
    if (__p_match(tok, 'K', "alloc")) return true;
    if (__p_match(tok, 'K', "alloc_array")) return true;
    if (tok->type == 'O' && u_is_unary(tok->str)) return true;

    return false;
}

bool __p_fset_comma(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx)) return false;

    return __p_match(__p_peek(ctx), 'S', ",");
}

bool __p_fset_op(p_ctx_t *ctx, int n_ops, string[] ops)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx)) return false;

    l_token_t *tok = __p_peek(ctx);
    for (int i = 0; i < n_ops; i++) {
        if (__p_match(tok, 'O', ops[i])) return true;
    }

    return false;
}

bool __p_fset_suffix(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx)) return false;

    l_token_t *tok = __p_peek(ctx);
    return __p_match(tok, 'S', "[")
        || __p_match(tok, 'O', "->")
        || __p_match(tok, 'O', ".");
}

bool __p_fset_simp(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    if (__p_fset_exp(ctx) || __p_fset_type(ctx)) return true;

    l_token_t *peek = __p_peek(ctx);
    return __p_match(peek, 'K', "error")
        || __p_match(peek, 'K', "assert")
        || __p_match(peek, 'K', "return");
}

bool __p_fset_stmt(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx)) return false;
    if (__p_fset_simp(ctx)) return true;

    // exclude `assert` and `error` and treat them as normal functions
    l_token_t *peek = __p_peek(ctx);
    return __p_match(peek, 'S', "{")
        || __p_match(peek, 'K', "if")
        || __p_match(peek, 'K', "while")
        || __p_match(peek, 'K', "for");
}

// END fsets

// BEGIN expect grammars

ast_exp_t *__p_parse_exp(p_ctx_t *ctx);
ast_exp_t *__p_parse_exp_by_level(p_ctx_t *ctx, int level);
ast_type_t *__p_parse_type(p_ctx_t *ctx);
ast_stmt_t *__p_parse_stmt(p_ctx_t *ctx);
ast_stmt_t *__p_parse_simp(p_ctx_t *ctx);

ast_exp_t *__p_expect_exp(p_ctx_t *ctx) {
    if (!__p_fset_exp(ctx)) {
        __p_set_err(ctx, "expecting expression");
        return NULL;
    }

    return __p_parse_exp(ctx);
}

ast_type_t *__p_expect_type(p_ctx_t *ctx) {
    if (!__p_fset_type(ctx)) {
        __p_set_err(ctx, "expecting type");
        return NULL;    
    }

    return __p_parse_type(ctx);
}

ast_stmt_t *__p_expect_stmt(p_ctx_t *ctx) {
    if (!__p_fset_stmt(ctx)) {
        __p_set_err(ctx, "expecting statement");
        return NULL;
    }

    return __p_parse_stmt(ctx);
}

ast_exp_t *__p_expect_exp_by_level(p_ctx_t *ctx, int level) {
    if (!__p_fset_exp(ctx)) {
        __p_set_err(ctx, "expecting expression");
        return NULL;
    }

    return __p_parse_exp_by_level(ctx, level);
}

ast_stmt_t *__p_expect_simp(p_ctx_t *ctx) {
    if (!__p_fset_stmt(ctx)) {
        __p_set_err(ctx, "expecting (simple) statement");
        return NULL;
    }

    return __p_parse_simp(ctx);
}

// END expect grammars

// BEGIN type production rules

ast_type_t *__p_parse_type(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_fset_type(ctx);
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && !e_has_err(ctx->err);
@*/
{
    ast_type_t *type = alloc(ast_type_t);
    l_token_t *tok = __p_next(ctx);

    if (tok->type == 'K') {
        string word = tok->str;
        type->pos = tok->pos;

        if (string_equal(word, "int")) type->type = 'I';
        else if (string_equal(word, "bool")) type->type = 'B';
        else if (string_equal(word, "string")) type->type = 'S';
        else if (string_equal(word, "char")) type->type = 'C';
        else if (string_equal(word, "void")) type->type = 'V';
        else if (string_equal(word, "struct")) {
            
            l_token_t *iden = __p_expect_id_tok(ctx, false);
            if (iden == NULL) return NULL;

            if (!om_has_s(ctx->types, string_join("$", iden->str))) {
                __p_set_err_at(
                    ctx, format("struct \"%s\" is not defined", iden->str), iden
                );
                return NULL;
            }
        
            type->type = 'X';
            type->iden = iden->str;
            type->pos = fr_merge_pos(tok->pos, iden->pos);
        }

    } else if (tok->type == 'I') {
        // sanity check: first-set of TYPE already ensured this
        assert(__p_is_type_name(tok->str, ctx));

        type->type = 'D';
        type->iden = tok->str;
        type->pos = tok->pos;
    } else {
        error("unreachable by first-set exclusion");
    }

    while (__p_fset_typel(ctx)) {
        l_token_t *curr = __p_next(ctx);
        ast_type_t *outer = alloc(ast_type_t);

        if (__p_match(curr, 'S', "[")) {
            if (!__p_expect_sep("]", ctx)) return NULL;

            outer->type = 'A';
            outer->pos = fr_merge_pos(type->pos, __p_last_pos(ctx));
        } else if (__p_match(curr, 'O', "*")) {
            outer->type = 'P';
            outer->pos = fr_merge_pos(type->pos, curr->pos);
        } else {
            error("unreachable by first-set exclusion");
        }

        outer->content = type;
        type = outer;
    }

    return type;
}

// END type production rules

// BEGIN expression production rules
// this is gonna be hell; check `syntax.cf` for precedence info

ast_exp_t *__p_parse_exp_atom(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_fset_exp(ctx);
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && fr_has_pos_exp(\result) && !e_has_err(ctx->err);
@*/
{
    ast_exp_t *exp = alloc(ast_exp_t);
    l_token_t *tok = __p_next(ctx);

    // parenthesized expression
    if (__p_match(tok, 'S', "(")) {

        // yay alloc and immediate dealloc im very good at programming
        exp = __p_expect_exp(ctx);
        if (exp == NULL) return NULL;
        if (!__p_expect_sep(")", ctx)) return NULL;

    // literal
    } else if (tok->type == 'L') {
        string lit_str = tok->str;
        char fst = string_charat(lit_str, 0);
        exp->pos = tok->pos;

        if (fst == '\'') {
            exp->type = 'C';
            exp->lit_chr = string_charat(lit_str, 1);
        } else if (fst == '"') {
            exp->type = 'S';
            exp->lit_str = string_sub(lit_str, 1, string_length(lit_str) - 1);
        } else if (string_equal(lit_str, "true")) {
            exp->type = 'B';
            exp->lit_boo = true;
        } else if (string_equal(lit_str, "false")) {
            exp->type = 'B';
            exp->lit_boo = false;
        } else if (string_equal(lit_str, "NULL")) {
            exp->type = 'N';
        } else {
            exp->type = 'I';
            int *parsed;
            if (u_is_hex(lit_str)) {
                parsed = parse_int(
                    string_sub(lit_str, 2, string_length(lit_str)), 16
                );
            } else {
                parsed = parse_int(lit_str, 10);
            }
            assert(parsed != NULL);
            exp->lit_int = *parsed;
        }

    // identifier
    } else if (tok->type == 'I') {
        string iden = tok->str;

        // sanity check: first-set exclusion
        assert(__p_can_be_var(iden, ctx));

        if (!__p_is_eof(ctx) && __p_match(__p_peek(ctx), 'S', "(")) {
            if (!__p_expect_sep("(", ctx)) return NULL;

            exp->type = 'F';
            exp->iden = iden;

            exp->params = v_create_vector();

            if (__p_fset_exp(ctx)) {
                ast_exp_t *curr = __p_parse_exp(ctx);
                if (curr == NULL) return NULL;
                v_append(exp->params, (void *) curr);

                while (__p_fset_comma(ctx)) {
                    if (!__p_expect_sep(",", ctx)) return NULL;

                    curr = __p_expect_exp(ctx);
                    if (curr == NULL) return NULL;

                    v_append(exp->params, (void *) curr);
                }
            }

            if (!__p_expect_sep(")", ctx)) return NULL;
            exp->pos = fr_merge_pos(tok->pos, __p_last_pos(ctx));

        } else {
            exp->type = 'D';
            exp->iden = iden;
            exp->pos = tok->pos;
        }

    // `alloc`
    } else if (__p_match(tok, 'K', "alloc")) {
        exp->type = 'A';
        if (!__p_expect_sep("(", ctx)) return NULL;

        exp->alloc_type = __p_expect_type(ctx);
        if (exp->alloc_type == NULL) return NULL;

        if (!__p_expect_sep(")", ctx)) return NULL;
        exp->pos = fr_merge_pos(tok->pos, __p_last_pos(ctx));

    // `alloc_array`
    } else if (__p_match(tok, 'K', "alloc_array")) {
        exp->type = 'R';
        if (!__p_expect_sep("(", ctx)) return NULL;

        exp->alloc_type = __p_expect_type(ctx);
        if (exp->alloc_type == NULL) return NULL;

        if (!__p_expect_sep(",", ctx)) return NULL;

        exp->alloc_length = __p_expect_exp(ctx);
        if (exp->alloc_type == NULL) return NULL;

        if (!__p_expect_sep(")", ctx)) return NULL;
        exp->pos = fr_merge_pos(tok->pos, __p_last_pos(ctx));

    } else {
        error("unreachable by first-set exclusion");
    }

    while (__p_fset_suffix(ctx)) {
        l_token_t *suf = __p_next(ctx);
        if (__p_match(suf, 'S', "[")) {
            ast_exp_t *idx = __p_expect_exp(ctx);
            if (idx == NULL) return NULL;
            if (!__p_expect_sep("]", ctx)) return NULL;

            ast_exp_t *idx_exp = alloc(ast_exp_t);
            idx_exp->type = 'X';
            idx_exp->left = exp;
            idx_exp->right = idx;
            idx_exp->pos = fr_merge_pos(exp->pos, __p_last_pos(ctx));
            exp = idx_exp;

        } else if (__p_match(suf, 'O', "->") || __p_match(suf, 'O', ".")) {
            if (__p_is_eof(ctx)) {
                __p_eof_err(ctx);
                return NULL;
            }

            l_token_t *name = __p_expect_id_tok(ctx, false);
            if (name == NULL) return NULL;

            ast_exp_t *attr_exp = alloc(ast_exp_t);
            attr_exp->type = __p_match(suf, 'O', ".") ? 'M' : 'P';
            attr_exp->left = exp;
            attr_exp->attr = name->str;
            attr_exp->pos = fr_merge_pos(exp->pos, __p_last_pos(ctx));
            exp = attr_exp;
            
        } else {
            error("unreachable by first-set exclusion");
        }
    }
    
    return exp;
}

ast_exp_t *__p_parse_exp(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_fset_exp(ctx);
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && fr_has_pos_exp(\result) && !e_has_err(ctx->err);
@*/
{
    return __p_parse_exp_by_level(ctx, 13);
}

// running `parse_tokens` and `num_tokens` each parse is reaaaaally slow but
// there's no array literal in C0 so imma choose readability over efficiency
// weeeeeeeeeeee
ast_exp_t *__p_parse_exp_binop(p_ctx_t *ctx, string raw_operators, int level)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_fset_exp(ctx);
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && fr_has_pos_exp(\result) && !e_has_err(ctx->err);
@*/
{
    int n_ops = num_tokens(raw_operators);
    string[] ops = parse_tokens(raw_operators);

    ast_exp_t *exp = __p_expect_exp_by_level(ctx, level - 1);
    if (exp == NULL) return NULL;

    while (__p_fset_op(ctx, n_ops, ops)) {
        l_token_t *operator = __p_next(ctx);

        ast_exp_t *next = __p_expect_exp_by_level(ctx, level - 1);
        if (next == NULL) return NULL;
        
        ast_exp_t *combine = alloc(ast_exp_t);
        combine->type = 'O';
        combine->operator = operator->str;
        combine->left = exp;
        combine->right = next;
        combine->pos = fr_merge_pos(exp->pos, next->pos);
        exp = combine;
    }

    return exp;
}

ast_exp_t *__p_parse_exp_by_level(p_ctx_t *ctx, int level)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_fset_exp(ctx);
//@requires 0 <= level && level <= 13;
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && fr_has_pos_exp(\result) && !e_has_err(ctx->err);
@*/
{
    if (level == 0) {
        return __p_parse_exp_atom(ctx);
    } else if (level == 1) {
        // previously for `.` and `->`, but now moved to exp_atom suffix
        return __p_parse_exp_atom(ctx);
    } else if (level == 2) {
        int n_ops = 4;
        string[] ops = parse_tokens("! - ~ *");

        if (__p_fset_op(ctx, n_ops, ops)) {
            l_token_t *prefix = __p_next(ctx);
            ast_exp_t *exp = alloc(ast_exp_t);
            exp->type = 'U';
            exp->operator = prefix->str;

            // lazy right recusion hehe
            exp->left = __p_expect_exp_by_level(ctx, level);
            exp->pos = fr_merge_pos(prefix->pos, exp->left->pos);

            return exp;
        } else {
            return __p_parse_exp_by_level(ctx, level - 1);
        }

    } else if (level == 3) {
        return __p_parse_exp_binop(ctx, "* / %", level);
    } else if (level == 4) {
        return __p_parse_exp_binop(ctx, "+ -", level);
    } else if (level == 5) {
        return __p_parse_exp_binop(ctx, ">> <<", level);
    } else if (level == 6) {
        return __p_parse_exp_binop(ctx, "< > <= >=", level);
    } else if (level == 7) {
        return __p_parse_exp_binop(ctx, "== !=", level);
    } else if (level == 8) {
        return __p_parse_exp_binop(ctx, "&", level);
    } else if (level == 9) {
        return __p_parse_exp_binop(ctx, "^", level);
    } else if (level == 10) {
        return __p_parse_exp_binop(ctx, "|", level);
    } else if (level == 11) {
        return __p_parse_exp_binop(ctx, "&&", level);
    } else if (level == 12) {
        return __p_parse_exp_binop(ctx, "||", level);
    } else if (level == 13) {
        ast_exp_t *cond = __p_parse_exp_by_level(ctx, level - 1);

        if (!__p_is_eof(ctx) && __p_match(__p_peek(ctx), 'O', "?")) {
            __p_next(ctx);
            ast_exp_t *if_exp = __p_expect_exp_by_level(ctx, level);
            if (if_exp == NULL) return NULL;

            if (!__p_expect('O', ":", ctx)) return NULL;

            ast_exp_t *else_exp = __p_parse_exp_by_level(ctx, level);
            if (else_exp == NULL) return NULL;

            ast_exp_t *combine = alloc(ast_exp_t);
            combine->type = 'T';
            combine->cond = cond;
            combine->left = if_exp;
            combine->right = else_exp;
            combine->pos = fr_merge_pos(cond->pos, else_exp->pos);
            cond = combine;
        }

        return cond;
    } else {
        error("unreachable");
    }
}

// END expression production rules

bool __p_assert_left_value(p_ctx_t *ctx, ast_exp_t *exp, l_token_t *tok)
//@requires exp != NULL;
{
    bool is_lv = false;
    if (exp->type == 'D' || exp->type == 'M' || exp->type == 'P') is_lv = true;
    
    if (exp->type == 'U' && string_equal(exp->operator, "*")) {
        is_lv = __p_assert_left_value(ctx, exp->left, tok);
    }

    if (exp->type == 'X') {
        is_lv = __p_assert_left_value(ctx, exp->left, tok);
    }

    if (!is_lv) {
        __p_set_err_at(ctx, "LHS of assignment must be a left value", tok);
    }

    return is_lv;
}

// BEGIN simple statement

ast_stmt_t *__p_parse_simp(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_fset_simp(ctx);
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && !e_has_err(ctx->err);
@*/
{
    ast_stmt_t *stmt = alloc(ast_stmt_t);
    if (__p_fset_exp(ctx)) {
        ast_exp_t *fv = __p_parse_exp(ctx);
        if (fv == NULL) return NULL;

        stmt->type = 'E';
        stmt->rv = fv;

        if (!__p_is_eof(ctx)) {
            l_token_t *peek = __p_peek(ctx);
            if (__p_match(peek, 'O', "++") || __p_match(peek, 'O', "--")) {
                __p_next(ctx);

                stmt->type = 'P';
                stmt->suffix_op = peek->str;
                stmt->lv = fv;
                stmt->rv = NULL;

                if (!__p_assert_left_value(ctx, stmt->lv, peek)) return NULL;

            } else if (peek->type == 'A') {
                __p_next(ctx);
                ast_exp_t *rhs = __p_expect_exp(ctx);
                if (rhs == NULL) return NULL;

                stmt->type = 'A';
                stmt->asn_op = peek->str;
                stmt->lv = fv;
                stmt->rv = rhs;

                if (!__p_assert_left_value(ctx, stmt->lv, peek)) return NULL;
            }
        }

    } else if (__p_fset_type(ctx)) {

        ast_type_t *decl_type = __p_parse_type(ctx);
        if (decl_type == NULL) return NULL;

        if (__p_is_eof(ctx)) {
            __p_eof_err(ctx);
            return NULL;
        }

        l_token_t *id_tok = __p_next(ctx);
        if (id_tok->type != 'I' || !__p_can_be_var(id_tok->str, ctx)) {
            __p_set_err_at(ctx, "expecting identifier in declaration", id_tok);
            return NULL;
        }

        stmt->type = 'D';
        stmt->decl_type = decl_type;
        stmt->decl_iden = id_tok->str;

        if (!__p_is_eof(ctx) && __p_match(__p_peek(ctx), 'A', "=")) {
            __p_next(ctx);
            ast_exp_t *rhs = __p_expect_exp(ctx);
            if (rhs == NULL) return NULL;
            stmt->rv = rhs;
        }

    } else if (
        __p_match(__p_peek(ctx), 'K', "assert") ||
        __p_match(__p_peek(ctx), 'K', "error")
    ) {

        l_token_t *kw_func = __p_next(ctx);
        stmt->type = string_equal(kw_func->str, "assert") ? 'S' : 'O';
        if (!__p_expect_sep("(", ctx)) return NULL;

        stmt->rv = __p_expect_exp(ctx);
        if (stmt->rv == NULL) return NULL;
        if (!__p_expect_sep(")", ctx)) return NULL;

    } else if (__p_match(__p_peek(ctx), 'K', "return")) {

        stmt->type = 'R';
        __p_next(ctx);
        stmt->rv = __p_expect_exp(ctx);
        if (stmt->rv == NULL) return NULL;

    } else {
        error("unreachable by first-set exclusion");
    }

    return stmt;
}

// END simple statement

// BEGIN compound statement

ast_stmt_t *__p_parse_stmt(p_ctx_t *ctx);
vec_t *__p_expect_block(p_ctx_t *ctx);

ast_stmt_t *__p_parse_stmt(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_fset_stmt(ctx);
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && !e_has_err(ctx->err);
@*/
{
    l_token_t *peek = __p_peek(ctx);
    ast_stmt_t *stmt;
    if (__p_match(peek, 'S', "{")) {

        stmt = alloc(ast_stmt_t);
        stmt->type = 'B';
        stmt->blk_a = __p_expect_block(ctx);
        if (stmt->blk_a == NULL) return NULL;

    } else if (__p_match(peek, 'K', "if"))  {

        stmt = alloc(ast_stmt_t);
        stmt->type = 'I';

        // `if` `(` <cond> `)`
        __p_next(ctx);
        if (!__p_expect_sep("(", ctx)) return NULL;
        
        stmt->cond = __p_expect_exp(ctx);
        if (stmt->cond == NULL) return NULL;

        if (!__p_expect_sep(")", ctx)) return NULL;

        // `{` [<stmt>] `}`
        ast_stmt_t *if_code = __p_expect_stmt(ctx);
        if (if_code == NULL) return NULL;
        stmt->blk_a = __p_convert_stmt_to_block(if_code);
        

        // `else` `{` [<stmt>] `}`
        if (!__p_is_eof(ctx) && __p_match(__p_peek(ctx), 'K', "else")) {
            __p_next(ctx);
            ast_stmt_t *else_code = __p_expect_stmt(ctx);
            if (else_code == NULL) return NULL;
            stmt->blk_b = __p_convert_stmt_to_block(else_code);
        }

    } else if (__p_match(peek, 'K', "while"))  {

        stmt = alloc(ast_stmt_t);
        stmt->type = 'W';

        // `while` `(` <cond> `)`
        __p_next(ctx);
        if (!__p_expect_sep("(", ctx)) return NULL;

        stmt->cond = __p_expect_exp(ctx);
        if (stmt->cond == NULL) return NULL;

        if (!__p_expect_sep(")", ctx)) return NULL;

        // `{` [<stmt>] `}`
        ast_stmt_t *content = __p_expect_stmt(ctx);
        if (content == NULL) return NULL;
        stmt->blk_a = __p_convert_stmt_to_block(content);

    } else if (__p_match(peek, 'K', "for"))  {

        stmt = alloc(ast_stmt_t);
        stmt->type = 'F';

        // `for` `(` <stmt> `;` <cond> `;` <stmt> `)`
        __p_next(ctx);
        if (!__p_expect_sep("(", ctx)) return NULL;

        if (__p_fset_simp(ctx)) {
            stmt->init = __p_parse_simp(ctx);
            if (stmt->init == NULL) return NULL;
        }

        if (!__p_expect_sep(";", ctx)) return NULL;
        stmt->cond = __p_expect_exp(ctx);
        if (stmt->cond == NULL) return NULL;
        if (!__p_expect_sep(";", ctx)) return NULL;

        if (__p_fset_simp(ctx)) {
            l_token_t *err_trace = __p_peek(ctx);
            stmt->incr = __p_parse_simp(ctx);
            if (stmt->init == NULL) return NULL;
        }

        if (!__p_expect_sep(")", ctx)) return NULL;

        // `{` [<stmt>] `}`
        ast_stmt_t *content = __p_expect_stmt(ctx);
        if (content == NULL) return NULL;
        stmt->blk_a = __p_convert_stmt_to_block(content);

    } else {
        stmt = __p_expect_simp(ctx);
        if (stmt == NULL) return NULL;

        if (!__p_expect_sep(";", ctx)) return NULL;
    }

    return stmt;
}

vec_t *__p_expect_block(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && !e_has_err(ctx->err);
@*/
{
    if (!__p_expect_sep("{", ctx)) return NULL;
    vec_t *stmts = v_create_vector();

    while (__p_fset_stmt(ctx)) {
        ast_stmt_t *stmt = __p_parse_stmt(ctx);
        if (stmt == NULL) return NULL;

        v_append(stmts, (void *) stmt);
    }

    if (!__p_expect_sep("}", ctx)) return NULL;
    return stmts;
}

// END compound statement

// BEGIN function def/decl

ast_func_t *__p_parse_func(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_fset_type(ctx);
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && !e_has_err(ctx->err);
@*/
{
    ast_func_t *func = alloc(ast_func_t);
    func->param_types = v_create_vector();
    func->param_names = v_create_vector();

    func->ret_type = __p_expect_type(ctx);
    if (func->ret_type == NULL) return NULL;

    l_token_t *iden_tok = __p_expect_id_tok(ctx, true);
    if (iden_tok == NULL) return NULL;
    func->name = iden_tok->str;

    if (!__p_expect_sep("(", ctx)) return NULL;

    if (__p_fset_type(ctx)) {
        ast_type_t *ptype = __p_expect_type(ctx);
        if (ptype == NULL) return NULL;

        l_token_t *iden = __p_expect_id_tok(ctx, true);
        if (iden == NULL) return NULL;

        v_append(func->param_types, (void *) ptype);
        v_append_string(func->param_names, iden->str);

        while (__p_fset_comma(ctx)) {
            __p_next(ctx);

            ptype = __p_expect_type(ctx);
            if (ptype == NULL) return NULL;

            iden = __p_expect_id_tok(ctx, true);
            if (iden == NULL) return NULL;

            v_append(func->param_types, (void *) ptype);
            v_append_string(func->param_names, iden->str);
        }
    }

    if (!__p_expect_sep(")", ctx)) return NULL;

    if (__p_is_eof(ctx)) {
        __p_eof_err(ctx);
        return NULL;
    }

    if (__p_match(__p_peek(ctx), 'S', ";")) {
        __p_next(ctx);
        func->defined = false;
    } else {
        func->defined = true;
        func->stmts = __p_expect_block(ctx);
        if (func->stmts == NULL) return NULL;
    }

    return func;
}

// END function def/decl

// BEGIN typedef

ast_alias_t *__p_parse_alias(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_match(__p_peek(ctx), 'K', "typedef");
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && !e_has_err(ctx->err);
@*/
{
    __p_next(ctx);
    ast_alias_t *alias = alloc(ast_alias_t);

    alias->original = __p_expect_type(ctx);
    if (alias->original == NULL) return NULL;

    l_token_t *tok = __p_expect_id_tok(ctx, false);
    if (tok == NULL) return NULL;
    alias->name = tok->str;
    if (!__p_expect_sep(";", ctx)) return NULL;

    om_insert_si(ctx->types, alias->name, 0);

    return alias;
}

// END typedef

// BEGIN struct

ast_struct_t *__p_parse_struct(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_match(__p_peek(ctx), 'K', "struct");
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && !e_has_err(ctx->err);
@*/
{
    __p_next(ctx);
    ast_struct_t *strct = alloc(ast_struct_t);

    l_token_t *tok = __p_expect_id_tok(ctx, false);
    if (tok == NULL) return NULL;

    // insert into ctx before continuing to allow recursive struct pointers
    strct->name = tok->str;
    om_insert_si(ctx->types, string_join("$", strct->name), 0);

    if (__p_is_eof(ctx)) {
        __p_eof_err(ctx);
        return NULL;
    }

    if (__p_match(__p_peek(ctx), 'S', ";")) {
        __p_next(ctx);
        strct->defined = false;
    } else {
        strct->defined = true;
        strct->mem_types = v_create_vector();
        strct->mem_names = v_create_vector();

        if (!__p_expect_sep("{", ctx)) return NULL;

        while  (__p_fset_type(ctx)) {
            ast_type_t *mtype = __p_expect_type(ctx);
            if (mtype == NULL) return NULL;

            l_token_t *mname = __p_expect_id_tok(ctx, false);
            if (tok == NULL) return NULL;

            if (!__p_expect_sep(";", ctx)) return NULL;

            v_append(strct->mem_types, (void *) mtype);
            v_append_string(strct->mem_names, mname->str);
        }

        if (!__p_expect_sep("}", ctx)) return NULL;
        if (!__p_expect_sep(";", ctx)) return NULL;
    }

    return strct;
}

// END struct

ast_program_t *__p_parse_program(p_ctx_t *ctx)
//@requires ctx != NULL;
/*@ensures \result == NULL && e_has_err(ctx->err)
        || \result != NULL && !e_has_err(ctx->err);
@*/
{
    ast_program_t *prog = alloc(ast_program_t);
    prog->globs = v_create_vector();

    while (!__p_is_eof(ctx)) {
        ast_glob_t *glob = alloc(ast_glob_t);
        l_token_t *peek = __p_peek(ctx);

        if (__p_match(peek, 'K', "struct")) {
            glob->type = 'S';

            ast_struct_t *strct = __p_parse_struct(ctx);
            if (strct == NULL) return NULL;
            glob->struc = strct;
        } else if (__p_match(peek, 'K', "typedef")) {
            glob->type = 'T';

            ast_alias_t *alias = __p_parse_alias(ctx);
            if (alias == NULL) return NULL;
            glob->alias = alias;
        } else if (__p_fset_type(ctx)) {
            glob->type = 'F';

            ast_func_t *func = __p_parse_func(ctx);
            if (func == NULL) return NULL;
            glob->func = func;
        } else {
            __p_set_err(ctx, "expecting typedef, struct or function def");
            return NULL;
        }

        v_append(prog->globs, (void *) glob);
    }

    prog->libs = ctx->libs;
    return prog;
}

// BEGIN parsing stage

om_map_t *p_empty_type_ctx() {
    return om_create_map(&string_ptr_compare);
}

/*
    Parsing each file updates the declared types that the parse has accumulated
    so far. `type_ctx` is mutated each time.
 */
e_error_t *p_parse_file(fr_file_t *file, om_map_t *type_ctx)
//@requires file != NULL;
//@requires v_is_vector(file->tokens);
{
    p_ctx_t *ctx = p_create_ctx(file->tokens, type_ctx);
    ctx->types = type_ctx;
    file->ast = __p_parse_program(ctx);

    return ctx->err;
}

// END parsing stage
