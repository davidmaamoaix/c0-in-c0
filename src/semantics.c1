// global semantic information
struct s_glob_ctx_t {

    // libs
    om_map_t *libs; // set[string]

    // struct declaration
    om_map_t *strcts; // string -> ast_struct_t *

    // type alias declaration
    om_map_t *aliases; // string -> ast_alias_t *

    // error handling (propagate instead of throwing)
    e_error_t *err;
};
typedef struct s_glob_ctx_t s_glob_ctx_t;

// local variable information
struct s_var_t {
    string name;
    ast_type_t *type;

    bool used;
    bool uninit; // whether the variable *can* be uninitialized
};
typedef struct s_var_t s_var_t;

// local scope information
struct s_scope_t {

    // local var info
    om_map_t *vars; // string -> s_var_t *
};
typedef struct s_scope_t s_scope_t;

// local semantic information
struct s_loc_ctx_t {

    vec_t *scopes;
};
typedef struct s_loc_ctx_t s_loc_ctx_t;

// BEGIN contracts

bool __s_is_glob_ctx(s_glob_ctx_t *gctx) {
    return gctx != NULL
        && __om_is_valid_tree(gctx->libs)
        && __om_is_valid_tree(gctx->strcts)
        && __om_is_valid_tree(gctx->aliases);
}

bool s_has_err(s_glob_ctx_t *gctx) {
    return gctx->err != NULL;
}

// END contracts

// BEGIN error

void s_set_err(s_glob_ctx_t *gctx, int err_type, string msg)
//@requires __s_is_glob_ctx(gctx);
//@requires !s_has_err(gctx);
//@ensures s_has_err(gctx);
{
    u_pos_t *pos = NULL;
    e_error_t *err = e_create_error(err_type, msg, pos);
    gctx->err = err;
}

void s_set_err_at(s_glob_ctx_t *ctx, int err_type, string msg, l_token_t *tok)
//@requires __s_is_glob_ctx(ctx);
//@requires !e_has_err(ctx->err);
//@ensures e_has_err(ctx->err);
{
    ctx->err = e_create_error(err_type, msg, tok->pos);
}

// END error

s_glob_ctx_t *s_create_glob_ctx()
//@ensures __s_is_glob_ctx(\result);
{
    s_glob_ctx_t *gctx = alloc(s_glob_ctx_t);
    gctx->libs = om_create_map(&string_ptr_compare);
    gctx->strcts = om_create_map(&string_ptr_compare);
    gctx->aliases = om_create_map(&string_ptr_compare);

    return gctx;
}
