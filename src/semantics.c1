// local variable information
struct s_var_t {
    string name;
    ast_type_t *type;

    bool used;
    bool uninit; // whether the variable *can* be uninitialized
};
typedef struct s_var_t s_var_t;

// local semantic information
struct s_loc_ctx_t {

    // stack of scopes; each scope is a map from variable name to variable info
    vec_t *scopes; // [om_map_t *]
};
typedef struct s_loc_ctx_t s_loc_ctx_t;

// global semantic information
struct s_glob_ctx_t {

    // libs
    om_map_t *libs; // set[string]

    // struct declaration
    om_map_t *strcts; // string -> ast_struct_t *

    // type alias declaration
    om_map_t *aliases; // string -> ast_alias_t *

    // error handling (propagate instead of throwing)
    e_error_t *err;

    // local context (null if not in a function)
    s_loc_ctx_t *lctx;
};
typedef struct s_glob_ctx_t s_glob_ctx_t;

// BEGIN contracts

bool __s_is_local_ctx(s_loc_ctx_t *lctx) {
    return lctx != NULL
        && v_is_vector(lctx->scopes)
        && !v_is_empty(lctx->scopes);
}

bool __s_is_glob_ctx(s_glob_ctx_t *gctx) {
    return gctx != NULL
        && __om_is_valid_tree(gctx->libs)
        && __om_is_valid_tree(gctx->strcts)
        && __om_is_valid_tree(gctx->aliases);
}

bool __s_has_loc_ctx(s_glob_ctx_t *gctx) {
    return gctx->lctx != NULL && __s_is_local_ctx(gctx->lctx);
}

bool s_has_err(s_glob_ctx_t *gctx) {
    return gctx->err != NULL;
}

// END contracts

// BEGIN error

void s_set_err(s_glob_ctx_t *gctx, int err_type, string msg)
//@requires __s_is_glob_ctx(gctx);
//@requires !s_has_err(gctx);
//@ensures s_has_err(gctx);
{
    u_pos_t *pos = NULL;
    e_error_t *err = e_create_error(err_type, msg, pos);
    gctx->err = err;
}

void s_set_err_at(s_glob_ctx_t *ctx, int err_type, string msg, u_pos_t *pos)
//@requires __s_is_glob_ctx(ctx);
//@requires !e_has_err(ctx->err);
//@ensures e_has_err(ctx->err);
{
    ctx->err = e_create_error(err_type, msg, pos);
}

// END error

// BEGIN constructors

s_loc_ctx_t *s_create_loc_ctx()
//@ensures __s_is_local_ctx(\result);
{
    s_loc_ctx_t *lctx = alloc(s_loc_ctx_t);
    lctx->scopes = v_create_vector();

    // initial scope for parameters
    om_map_t *param_scope = om_create_map(&string_ptr_compare);
    v_append(lctx->scopes, (void *) param_scope);

    return lctx;
}

s_glob_ctx_t *s_create_glob_ctx()
//@ensures __s_is_glob_ctx(\result);
{
    s_glob_ctx_t *gctx = alloc(s_glob_ctx_t);
    gctx->libs = om_create_map(&string_ptr_compare);
    gctx->strcts = om_create_map(&string_ptr_compare);
    gctx->aliases = om_create_map(&string_ptr_compare);

    return gctx;
}

bool s_add_decl_var(s_glob_ctx_t *gctx, string name, ast_type_t *type)
//@requires __s_is_glob_ctx(gctx);
//@requires __s_has_loc_ctx(gctx);
{
    s_loc_ctx_t *lctx = gctx->lctx;
    om_map_t *top_scope = (om_map_t *) v_get_last(lctx->scopes);

    if (om_has_s(top_scope, name)) {
        s_set_err_at(
            gctx, 10,
            format("duplicate variable declaration \"%s\"", name),
            type->pos
        );
        return false;
    }

    om_insert_s(top_scope, name, (void *) type);

    return true;
}

// END constructors

// BEGIN checks

bool s_has_decl_alias(s_glob_ctx_t *gctx, string name)
//@requires __s_is_glob_ctx(gctx);
{
    return om_has_s(gctx->aliases, name);
}

bool s_has_decl_struct(s_glob_ctx_t *gctx, string name)
//@requires __s_is_glob_ctx(gctx);
{
    return om_has_s(gctx->strcts, name);
}

// END checks

// BEGIN context-mutating actions

bool s_add_decl_alias(s_glob_ctx_t *gctx, string name, ast_alias_t *alias)
//@requires __s_is_glob_ctx(gctx);
//@ensures \result && !s_has_err(gctx) || !\result && s_has_err(gctx);
{
    if (om_has_s(gctx->aliases, name)) {
        s_set_err_at(
            gctx, 12,
            format("duplicate typedef declaration \"%s\"", name),
            alias->pos
        );
        return false;
    }

    om_insert_s(gctx->aliases, name, (void *) alias);
    return true;
}

bool s_add_decl_struct(s_glob_ctx_t *gctx, string name, ast_struct_t *strct)
//@requires __s_is_glob_ctx(gctx);
//@ensures \result && !s_has_err(gctx) || !\result && s_has_err(gctx);
{
    if (om_has_s(gctx->strcts, name)) {
        ast_struct_t *prev = (ast_struct_t *) om_get_s(gctx->strcts, name);
        if (prev->defined) {
            s_set_err_at(
                gctx, 11,
                format("duplicate struct declaration \"%s\"", name),
                strct->pos
            );
            return false;
        }
    }

    om_insert_s(gctx->strcts, name, (void *) strct);
    return true;
}

void s_push_scope(s_glob_ctx_t *gctx)
//@requires __s_is_glob_ctx(gctx);
//@requires __s_has_loc_ctx(gctx);
{
    s_loc_ctx_t *lctx = gctx->lctx;
    om_map_t *new_scope = om_create_map(&string_ptr_compare);
    v_append(lctx->scopes, (void *) new_scope);
}

void s_pop_scope(s_glob_ctx_t *gctx)
//@requires __s_is_glob_ctx(gctx);
//@requires __s_has_loc_ctx(gctx);
//@requires !v_is_empty(gctx->lctx->scopes);
{
    s_loc_ctx_t *lctx = gctx->lctx;
    v_remove_last(lctx->scopes);
}

void s_enter_function(s_glob_ctx_t *gctx)
//@requires __s_is_glob_ctx(gctx);
//@requires !__s_has_loc_ctx(gctx);
{
    gctx->lctx = s_create_loc_ctx();
}

void s_exit_function(s_glob_ctx_t *gctx)
//@requires __s_is_glob_ctx(gctx);
//@requires __s_has_loc_ctx(gctx);
{
    s_pop_scope(gctx);
    assert(v_is_empty(gctx->lctx->scopes));

    gctx->lctx = NULL;
}

// END context-mutating actions
