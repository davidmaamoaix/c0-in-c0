struct ast_type_t {
    /*
        - I: integer
        - B: boolean
        - S: string
        - C: character
        - V: void
        - D: typedef identifier
        - X: struct
        - A: array
        - P: pointer
     */
    char type;

    // 'D', 'X'
    string iden;

    // 'A', 'P'
    struct ast_type_t *content;
};
typedef struct ast_type_t ast_type_t;

struct ast_exp_t {
    /*
        - I: literal (int)
        - C: literal (char)
        - S: literal (string)
        - B: literal (boolean)
        - N: literal (NULL)
        - D: identifier
        - F: function call
        - X: brackets (list indexing)
        - A: alloc
        - R: alloc array
        - O: operator (binary)
        - U: operator (unary)
        - T: tenary operator
        - M: member (struct field access)
        - P: arrow (pointer field access)
     */
    char type;

    // `I`, `C`, `S`, `B`
    int lit_int;
    char lit_chr;
    string lit_str;
    bool lit_boo;

    // `D`, `F`
    string iden;

    // `F`
    vec_t *params;

    // `A`, `R`
    ast_type_t *alloc_type;

    // `R`
    struct ast_exp_t *alloc_length;

    // `T`
    struct ast_exp_t *cond;

    // `U`, `O`
    string operator;

    // `U`, `O`, `T`, `X`, `M`, `P`
    struct ast_exp_t *left;

    // `O`, `T`, `X`
    struct ast_exp_t *right;

    // `M`, `P`
    string attr;
};
typedef struct ast_exp_t ast_exp_t;

typedef vec_t ast_block_t;

// flattens the <simple> and <stmt> grammar
struct ast_stmt_t {
    /*
        <simp>:
        - A: assign
        - P: postfix `++` `--`
        - E: expression
        - D: declaration

        <stmt>:
        - I: if
        - W: while
        - F: for
        - R: return
        - B: block
        - S: assert
        - O: error
     */
    char type;

    // `A`, `P`
    ast_exp_t *lv;

    // `A`, `E`, `R`, `S`, `D`, `O`
    ast_exp_t *rv;

    string asn_op;

    // `P`
    string suffix_op;

    // `D`
    ast_type_t *decl_type;
    string decl_iden;

    // `I`, `W`, `F`
    ast_exp_t *cond;

    // `I`, `B`, `W`, `F`
    ast_block_t *blk_a;

    // `I`
    ast_block_t *blk_b;
};
typedef struct ast_stmt_t ast_stmt_t;

struct ast_func_t {
    // declared but not defined
    bool undefined;
};
typedef struct ast_func_t ast_func_t;

struct ast_program_t {
    int n_types;
    int n_funcs;
    ast_type_t *[] types_pool;
    ast_func_t *[] funcs_pool;
    om_map_t *type_dict;
    om_map_t *func_dict;
};
typedef struct ast_program_t ast_program_t;

// BEGIN contracts

bool ast_is_program(ast_program_t *prog) {
    if (prog == NULL) return false;
    if (prog->n_types < 0 || prog->n_funcs < 0) return false;
    if (prog->n_funcs != om_size(prog->func_dict)) return false;
    if (prog->n_types != om_size(prog->type_dict)) return false;

    //@assert prog->n_types == \length(prog->types_pool);
    //@assert prog->n_funcs == \length(prog->funcs_pool);

    if (prog->type_dict == NULL || prog->func_dict == NULL) return false;

    return true;
}

// END contracts
