#use <conio>
#use <string>

// BEGIN printing

void __au_indent(int size)
//@requires size >= 0;
{
    for (int i = 0; i < size; i++) print("    ");
}

void __au_print_type(ast_type_t *type)
//@requires type != NULL;
{
    if (type->type == 'I') print("int");
    else if (type->type == 'B') print("bool");
    else if (type->type == 'S') print("string");
    else if (type->type == 'C') print("char");
    else if (type->type == 'V') print("void");
    else if (type->type == 'D') print(type->iden);
    else if (type->type == 'X') printf("struct %s", type->iden);
    else if (type->type == 'A') {
        __au_print_type(type->content);
        print("[]");
    }
    else if (type->type == 'P') {
        __au_print_type(type->content);
        print("*");
    } else {
        print("<unknown_type>");
    }
}

void __au_print_exp(ast_exp_t *exp, bool add_paren)
//@requires exp != NULL;
{
    if (exp->type == 'I') printint(exp->lit_int);
    else if (exp->type == 'C') printchar(exp->lit_chr);
    else if (exp->type == 'S') printf("\"%s\"", exp->lit_str);
    else if (exp->type == 'B') printbool(exp->lit_boo);
    else if (exp->type == 'N') print("NULL");
    else if (exp->type == 'D') print(exp->iden);
    else if (exp->type == 'N') print("NULL");
    else if (exp->type == 'F') {
        printf("%s(", exp->iden);

        if (v_length(exp->params) > 0) {
            __au_print_exp((ast_exp_t *) v_get(exp->params, 0), false);
            for (int i = 1; i < v_length(exp->params); i++) {
                print(", ");
                __au_print_exp((ast_exp_t *) v_get(exp->params, i), false);
            }
        }

        printchar(')');
    } else if (exp->type == 'X') {
        __au_print_exp(exp->left, false);
        printchar('[');
        __au_print_exp(exp->right, false);
        printchar(']');
    } else if (exp->type == 'A') {
        print("alloc(");
        __au_print_type(exp->alloc_type);
        printchar(')');
    } else if (exp->type == 'R') {
        print("alloc_array(");
        __au_print_type(exp->alloc_type);
        print(", ");
        __au_print_exp(exp->alloc_length, false);
        printchar(')');
    } else if (exp->type == 'O') {
        if (add_paren) printchar('(');
        __au_print_exp(exp->left, true);
        printf(" %s ", exp->operator);
        __au_print_exp(exp->right, true);
        if (add_paren) printchar(')');
    } else if (exp->type == 'U') {
        if (add_paren) printchar('(');
        printf("%s", exp->operator);
        __au_print_exp(exp->left, true);
        if (add_paren) printchar(')');
    } else if (exp->type == 'T') {
        if (add_paren) printchar('(');
        __au_print_exp(exp->cond, true);
        print(" ? ");
        __au_print_exp(exp->left, true);
        print(" : ");
        __au_print_exp(exp->right, true);
        if (add_paren) printchar(')');
    } else if (exp->type == 'M') {
        __au_print_exp(exp->left, true);
        printchar('.');
        print(exp->attr);
    } else if (exp->type == 'P') {
        __au_print_exp(exp->left, true);
        print("->");
        print(exp->attr);
    } else {
        print("<unknown_expression>");
    }
}

void __au_print_stmt(ast_stmt_t *stmt, int indent, bool semicolon)
//@requires stmt != NULL;
{
    if (stmt->type == 'A') {
        __au_indent(indent);
        __au_print_exp(stmt->lv, false);
        printf(" %s ", stmt->asn_op);
        __au_print_exp(stmt->rv, false);
        if (semicolon) printchar(';');
    } else if (stmt->type == 'P') {
        __au_indent(indent);
        __au_print_exp(stmt->lv, false);
        print(stmt->suffix_op);
        if (semicolon) printchar(';');
    } else if (stmt->type == 'E') {
        __au_indent(indent);
        __au_print_exp(stmt->rv, false);
        if (semicolon) printchar(';');
    } else if (stmt->type == 'D') {
        __au_indent(indent);
        __au_print_type(stmt->decl_type);
        printf(" %s", stmt->decl_iden);

        if (stmt->rv == NULL) {
            if (semicolon) printchar(';');
        } else {
            print(" = ");
            __au_print_exp(stmt->rv, false);
            if (semicolon) printchar(';');
        }
    } else if (stmt->type == 'R') {
        __au_indent(indent);
        print("return ");
        __au_print_exp(stmt->rv, false);
        if (semicolon) printchar(';');
    } else if (stmt->type == 'S' || stmt->type == 'O') {
        __au_indent(indent);
        print(stmt->type == 'S' ? "assert(" : "error(");
        __au_print_exp(stmt->rv, false);
        printchar(')');
        if (semicolon) printchar(';');
    } else if (stmt->type == 'I') {
        __au_indent(indent);
        print("if (");
        __au_print_exp(stmt->cond, false);
        println(") {");
        for (int i = 0; i < v_length(stmt->blk_a); i++) {
            __au_print_stmt(
                (ast_stmt_t *) v_get(stmt->blk_a, i), indent + 1, true
            );
            println("");
        }
        __au_indent(indent);
        print("}");

        if (stmt->blk_b != NULL) {
            println(" else {");
            for (int i = 0; i < v_length(stmt->blk_b); i++) {
                __au_print_stmt(
                    (ast_stmt_t *) v_get(stmt->blk_b, i), indent + 1, true
                );
                println("");
            }
            __au_indent(indent);
            printchar('}');
        }
    } else if (stmt->type == 'W') {
        __au_indent(indent);
        print("while (");
        __au_print_exp(stmt->cond, false);
        println(") {");
        for (int i = 0; i < v_length(stmt->blk_a); i++) {
            __au_print_stmt(
                (ast_stmt_t *) v_get(stmt->blk_a, i), indent + 1, true
            );
            println("");
        }
        __au_indent(indent);
        print("}");
    } else if (stmt->type == 'F') {
        __au_indent(indent);
        print("for (");
        __au_print_stmt(stmt->init, 0, false);
        print("; ");
        __au_print_exp(stmt->cond, false);
        print("; ");
        __au_print_stmt(stmt->incr, 0, false);
        println(") {");
        for (int i = 0; i < v_length(stmt->blk_a); i++) {
            __au_print_stmt(
                (ast_stmt_t *) v_get(stmt->blk_a, i), indent + 1, false
            );
            println("");
        }
        __au_indent(indent);
        printchar('}');
    } else if (stmt->type == 'B') {
        __au_indent(indent);
        println("{");
        for (int i = 0; i < v_length(stmt->blk_a); i++) {
            __au_print_stmt(
                (ast_stmt_t *) v_get(stmt->blk_a, i), indent + 1, false
            );
            println("");
        }
        __au_indent(indent);
        print("}");
    } else {
        print("<unknown_statement>");
    }
}

void __au_print_func(ast_func_t *func)
//@requires func != NULL;
{
    __au_print_type(func->ret_type);
    printf(" %s(", func->name);

    if (v_length(func->param_types) > 0) {
        __au_print_type((ast_type_t *) v_get(func->param_types, 0));
        printf(" %s", * (string *) v_get(func->param_names, 0));

        for (int i = 1; i < v_length(func->param_types); i++) {
            print(", ");
            __au_print_type((ast_type_t *) v_get(func->param_types, i));
            printf(" %s", * (string *) v_get(func->param_names, i));
        }
    }

    printchar(')');

    if (func->defined) {
        println(" {");

        for (int i = 0; i < v_length(func->stmts); i++) {
            __au_print_stmt((ast_stmt_t *) v_get(func->stmts, i), 1, true);
            println("");
        }

        printchar('}');
    } else {
        printchar(';');
    }

    println("");
}

void __au_print_struct(ast_struct_t *strct)
//@requires strct != NULL;
{
    printf("struct %s", strct->name);

    if (strct->defined) {
        println(" {");

        for (int i = 0; i < v_length(strct->mem_types); i++) {
            __au_indent(1);
            __au_print_type((ast_type_t *) v_get(strct->mem_types, i));
            printf(" %s;\n", * (string *) v_get(strct->mem_names, i));
        }

        println("};");
    } else {
        println(";");
    }
}

void __au_print_alias(ast_alias_t *alias)
//@requires alias != NULL;
{
    print("typedef ");
    __au_print_type(alias->original);
    printf(" %s;\n", alias->name);
}

void au_print_program(ast_program_t *prog)
//@requires prog != NULL;
{
    for (int i = 0; i < v_length(prog->globs); i++) {
        ast_glob_t *glob = (ast_glob_t *) v_get(prog->globs, i);
        if (glob->type == 'F') {
            __au_print_func(glob->func);
        } else if (glob->type == 'S') {
            __au_print_struct(glob->struc);
        } else if (glob->type == 'T') {
            __au_print_alias(glob->alias);
        } else {
            print("<unknown_global_defn>");
        }
        println("");
    }
}

// END printing

// BEGIN equality

bool au_eq_type(ast_type_t *a, ast_type_t *b) {
    if (a->type != b->type) return false;

    char type = a->type;
    if (type == 'D' || type == 'X') return string_equal(a->iden, b->iden);
    if (type == 'A' || type == 'P') return au_eq_type(a->content, b->content);

    error(format("unimplemented ast_type_t type: '%c'", type));
}

bool au_eq_exp(ast_exp_t *a, ast_exp_t *b) {
    if (a->type != b->type) return false;

    char type = a->type;
    if (type == 'I') return a->lit_int == b->lit_int;
    if (type == 'C') return a->lit_chr == b->lit_chr;
    if (type == 'S') return string_equal(a->lit_str, b->lit_str);
    if (type == 'B') return a->lit_boo == b->lit_boo;

    if (type == 'D') return string_equal(a->iden, b->iden);
    if (type == 'F') {
        if (!string_equal(a->iden, b->iden)) return false;
        if (v_length(a->params) != v_length(b->params)) return false;

        for (int i = 0; i < v_length(a->params); i++) {
            ast_exp_t *curr_a = (ast_exp_t *) v_get(a->params, i);
            ast_exp_t *curr_b = (ast_exp_t *) v_get(b->params, i);

            if (!au_eq_exp(curr_a, curr_b)) return false;
        }

        return true;
    }

    if (type == 'X') {
        return au_eq_exp(a->left, b->left) && au_eq_exp(a->right, b->right);
    }

    if (type == 'A') return au_eq_type(a->alloc_type, b->alloc_type);
    if (type == 'R') {
        return au_eq_type(a->alloc_type, b->alloc_type)
            && au_eq_exp(a->alloc_length, b->alloc_length);
    }

    if (type == 'U') {
        return string_equal(a->operator, b->operator)
            && au_eq_exp(a->left, b->left);
    }

    if (type == 'O') {
        return string_equal(a->operator, b->operator)
            && au_eq_exp(a->left, b->left) && au_eq_exp(a->right, b->right);
    }

    if (type == 'T') {
        return string_equal(a->operator, b->operator)
            && au_eq_exp(a->cond, b->cond)
            && au_eq_exp(a->left, b->left) && au_eq_exp(a->right, b->right);
    }

    if (type == 'M' || type == 'P') {
        return au_eq_exp(a->left, b->left) && string_equal(a->attr, b->attr);
    }

    error(format("unimplemented ast_exp_t type: '%c'", type));
}

bool au_eq_stmt(ast_stmt_t *a, ast_stmt_t *b);

bool au_eq_block(ast_block_t *a, ast_block_t *b) {
    if (v_length(a) != v_length(b)) return false;

    for (int i = 0; i < v_length(a); i++) {
        ast_stmt_t *stmt_a = (ast_stmt_t *) v_get(a, i);
        ast_stmt_t *stmt_b = (ast_stmt_t *) v_get(b, i);
        if (!au_eq_stmt(stmt_a, stmt_b)) return false;
    }

    return true;
}

bool au_eq_stmt(ast_stmt_t *a, ast_stmt_t *b) {
    if (a->type != b->type) return false;

    char type = a->type;
    if (type == 'A') {
        return au_eq_exp(a->lv, b->rv) && au_eq_exp(a->rv, b->rv);
    }

    if (type == 'E' || type == 'S' || type == 'O') {
        return au_eq_exp(a->rv, b->rv);
    }

    if (type == 'P') {
        return string_equal(a->suffix_op, b->suffix_op)
            && au_eq_exp(a->lv, b->rv);
    }

    if (type == 'D') {
        if (!au_eq_type(a->decl_type, b->decl_type)) return false;
        if (!string_equal(a->decl_iden, b->decl_iden)) return false;
        
        if (a->rv == NULL && b->rv == NULL) return true;
        if (a->rv == NULL || b->rv == NULL) return false;

        return au_eq_exp(a->rv, b->rv);
    }

    if (type == 'R') {
        if (a->rv == NULL && b->rv == NULL) return true;
        if (a->rv == NULL || b->rv == NULL) return false;
        return au_eq_exp(a->rv, b->rv);
    }

    if (type == 'B') return au_eq_block(a->blk_a, b->blk_a);
    if (type == 'I') {
        if (!au_eq_exp(a->cond, b->cond)) return false;
        if (!au_eq_block(a->blk_a, b->blk_a)) return false;

        if (a->blk_b == NULL && b->blk_b == NULL) return true;
        if (a->blk_b == NULL || b->blk_b == NULL) return false;

        return au_eq_block(a->blk_b, b->blk_b);
    }

    if (type == 'W') {
        return au_eq_exp(a->cond, b->cond) && au_eq_block(a->blk_a, b->blk_a);
    }

    if (type == 'F') {
        return au_eq_stmt(a->init, b->init) && au_eq_exp(a->cond, b->cond)
            && au_eq_stmt(a->incr, b->incr) && au_eq_block(a->blk_a, b->blk_a);
    }

    error(format("unimplemented ast_stmt_t type: '%c'", type));
}

bool au_eq_func(ast_func_t *a, ast_func_t *b) {
    if (!au_eq_type(a->ret_type, b->ret_type)) return false;
    if (!string_equal(a->name, b->name)) return false;
    if (v_length(a->param_types) != v_length(b->param_types)) return false;
    if (v_length(a->param_names) != v_length(b->param_names)) return false;

    for (int i = 0; i < v_length(a->param_types); i++) {
        ast_type_t *type_a = (ast_type_t *) v_get(a->param_types, i);
        ast_type_t *type_b = (ast_type_t *) v_get(b->param_types, i);
        string iden_a = v_get_string(a->param_names, i);
        string iden_b = v_get_string(b->param_names, i);

        if (!au_eq_type(type_a, type_b)) return false;
        if (!string_equal(iden_a, iden_b)) return false;
    }

    if (!a->defined && !b->defined) return true;
    if (!a->defined || !b->defined) return false;

    return au_eq_block(a->stmts, b->stmts);
}

// END equality
