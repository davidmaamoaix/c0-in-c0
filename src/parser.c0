struct p_ctx_t {
    // declarative information
    om_map_t *types;
    om_map_t *funcs;

    // token tracking
    int n_tokens;
    int pc;
    l_token_t *[] tokens;

    // error handling (propagate instead of throwing)
    bool err;
    string err_msg;
    int err_row;
    int err_col;
};
typedef struct p_ctx_t p_ctx_t;

// BEGIN contracts

bool __p_is_ctx(p_ctx_t *ctx) {
    if (ctx == NULL) return false;
    if (!om_is_valid(ctx->types)) return false;
    if (!om_is_valid(ctx->funcs)) return false;
    
    if (ctx->n_tokens < 0) return false;
    if (!(0 <= ctx->pc && ctx->pc <= ctx->n_tokens)) return false;
    //@assert ctx->n_tokens <= \length(ctx->tokens);

    return true;
}

bool __p_is_eof(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    return ctx->pc == ctx->n_tokens;
}

// END contracts

// BEGIN constructors

p_ctx_t *p_create_ctx(int n_tokens, l_token_t *[] tokens)
//@ensures __p_is_ctx(\result);
{
    p_ctx_t *ctx = alloc(p_ctx_t);
    ctx->types = om_create_map();
    ctx->funcs = om_create_map();

    ctx->n_tokens = n_tokens;
    ctx->tokens = tokens;

    return ctx;
}

// END constructors

// BEGIN shorthands

void __p_set_err(p_ctx_t *ctx, string msg);
void __p_set_err_at(p_ctx_t *ctx, string msg, l_token_t *tok);
void __p_eof_err(p_ctx_t *ctx);
bool __p_expect(char type, string word, p_ctx_t *ctx);
bool __p_expect_kw(string kwd, p_ctx_t *ctx);
bool __p_expect_sep(string sep, p_ctx_t *ctx);
l_token_t *__p_peek(p_ctx_t *ctx);
l_token_t *__p_next(p_ctx_t *ctx);

void __p_set_err(p_ctx_t *ctx, string msg)
//@requires __p_is_ctx(ctx);
//@requires !ctx->err;
//@ensures ctx->err;
{
    ctx->err = true;
    ctx->err_msg = msg;

    if (__p_is_eof(ctx)) {
        ctx->err_row = -1;
        ctx->err_col = -1;
    } else {
        l_token_t *curr = __p_peek(ctx);
        ctx->err_row = curr->row;
        ctx->err_col = curr->col;
    }
}

void __p_set_err_at(p_ctx_t *ctx, string msg, l_token_t *tok)
//@requires __p_is_ctx(ctx);
//@requires !ctx->err;
//@ensures ctx->err;
{
    ctx->err = true;
    ctx->err_msg = msg;
    ctx->err_row = tok->row;
    ctx->err_col = tok->col;
}

void __p_eof_err(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !ctx->err;
//@ensures ctx->err;
{
    __p_set_err(ctx, "unexpected end of file");
}

bool __p_match(l_token_t *tok, char type, string word) {
    return tok->type == type && string_equal(tok->str, word);
}

bool __p_expect(char type, string word, p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires u_is_token_type(type);
//@ensures \result && !ctx->err || !\result && ctx->err;
{
    if (__p_is_eof(ctx)) {
        __p_eof_err(ctx);
        return false;
    }

    l_token_t *tok = ctx->tokens[ctx->pc];
    ctx->pc++;

    if (!__p_match(tok, type, word)) {
        ctx->err = true;
        ctx->err_msg = format(
            "expecting %s \"%s\", got %s \"%s\"",
            u_tok_type_to_readable(type), word,
            u_tok_type_to_readable(tok->type), tok->str
        );

        return false;
    }

    return true;
}

bool __p_expect_kw(string kwd, p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@ensures \result && !ctx->err || !\result && ctx->err;
{
    return __p_expect('K', kwd, ctx);
}

bool __p_expect_sep(string sep, p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@ensures \result && !ctx->err || !\result && ctx->err;
{
    return __p_expect('S', sep, ctx);
}

l_token_t *__p_peek(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
{
    return ctx->tokens[ctx->pc];
}

l_token_t *__p_next(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
{
    l_token_t *tok = ctx->tokens[ctx->pc];
    ctx->pc++;
    return tok;
}

// END shorthands

// BEGIN first sets

// firset-set of left-recursion eliminated rule of TYPE
bool __p_fset_typel(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx)) return false;

    l_token_t *tok = __p_peek(ctx);
    return __p_match(tok, 'S', "[") || __p_match(tok, 'O', "*");
}

bool __p_fset_type(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
{
    if (__p_is_eof(ctx)) return false;

    l_token_t *tok = __p_peek(ctx);
    string word = tok->str;
    if (tok->type == 'K') {
        return u_is_native_type(word) || string_equal(word, "struct");
    }

    // check type definitions for `struct <word>`
    if (tok->type == 'I') {
        return om_has_s(ctx->types, word);
    }

    return false;
}

// END first sets

// BEGIN type production rules

ast_type_t *__p_parse_type(p_ctx_t *ctx)
//@requires __p_is_ctx(ctx);
//@requires !__p_is_eof(ctx);
//@requires __p_fset_type(ctx);
//@ensures \result == NULL && ctx->err || \result != NULL && !ctx->err;
{
    ast_type_t *type = alloc(ast_type_t);
    l_token_t *tok = __p_next(ctx);

    if (tok->type == 'K') {
        string word = tok->str;

        if (string_equal(word, "int")) type->type = 'I';
        else if (string_equal(word, "bool")) type->type = 'B';
        else if (string_equal(word, "string")) type->type = 'S';
        else if (string_equal(word, "char")) type->type = 'C';
        else if (string_equal(word, "void")) type->type = 'V';
        else if (string_equal(word, "struct")) {

            if (__p_is_eof(ctx)) {
                __p_eof_err(ctx);
                return NULL;
            }

            l_token_t *iden = __p_next(ctx);
            if (iden->type != 'I') {
                __p_set_err_at(
                    ctx, "expecting identifier after keyword \"struct\"", iden
                );
                return NULL;
            }

            if (!om_has_s(ctx->types, string_join("$", iden->str))) {
                __p_set_err_at(
                    ctx, format("struct \"%s\" is not defined", iden->str), iden
                );
                return NULL;
            }

            type->type = 'X';
            type->iden = iden->str;
        }

    } else if (tok->type == 'I') {
        // sanity check: first-set of TYPE already ensured this
        assert(om_has_s(ctx->types, tok->str));

        type->type = 'D';
        type->iden = tok->str;
    } else {
        error("unreachable by first-set exclusion");
    }

    while (__p_fset_typel(ctx)) {
        l_token_t *curr = __p_next(ctx);
        ast_type_t *outer = alloc(ast_type_t);

        if (__p_match(curr, 'S', "[")) {
            if (!__p_expect_sep("]", ctx)) return NULL;

            outer->type = 'A';
        } else if (__p_match(curr, 'O', "*")) {
            outer->type = 'P';
        } else {
            error("unreachable by first-set exclusion");
        }

        outer->content = type;
        type = outer;
    }

    return type;
}

// END type production rules

// BEGIN parsing stage

ast_program_t *p_parse_tokens(int n_tokens, l_token_t *[] tokens)
//@requires n_tokens <= \length(tokens);
{
    p_ctx_t *ctx = p_create_ctx(n_tokens, tokens);

    ast_program_t *prog = alloc(ast_program_t);

    return prog;
}

// END parsing stage
