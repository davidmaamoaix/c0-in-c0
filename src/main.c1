#use <args>
#use <conio>
#use <string>

void compile_files(string[] files, int n_files, cparams_t *params) {
    vec_t *file_reprs = v_create_vector(); // [fr_file_t *]
    for (int i = 0; i < n_files; i++) {
        string path = files[i];
        string code = f_read_file(path);
        fr_file_t *repr = alloc(fr_file_t);
        repr->path = path;
        repr->prog = code;

        v_append(file_reprs, (void *) repr);
    }
    
    c_result_t *res = compile(file_reprs, params);

    if (e_has_err(res->err)) {
        string msg = e_format(res->err, res->failed_file);
        print(msg);

        return;
    }
}

void print_padded(string s, int pad) {
    printf("%s", s);
    for (int i = 0; i <  pad - string_length(s); i++) {
        printchar(' ');
    }
}

void print_help() {
    println("Usage: ccc0 [OPTION...] SOURCEFILE");
    println("where OPTION is");

    int pad = string_length("  --no-purity-check");

    print_padded("  --help", pad);
    println("  Give short usage message and exit");

    print_padded("  --no-purity-check", pad);
    println("  Disable checking contract functions for purity (WIP)");

    print_padded("  --warning", pad);
    println("  Enable warning");

    print_padded("  --dump-ast", pad);
    println("  Pretty print the program's abstract syntax tree");
}

int main() {

    bool *help = alloc(bool);
    args_flag("--help",  help);

    bool *purity = alloc(bool);
    args_flag("--no-purity-check",  purity);

    bool *warning = alloc(bool);
    args_flag("--warning",  warning);

    bool *dump_ast = alloc(bool);
    args_flag("--dump-ast",  dump_ast);

    args_t args = args_parse();
    if (args->argc == 0) {
        print_help();
    } else {
        for (int i = 0; i < args->argc; i++) {
            string source = args->argv[i];
            if (string_charat(source, 0) == '-') {
                error(format("unrecognized option \"%s\"", source));
            }
        }

        if (*help) {
            print_help();
            return 0;
        }

        cparams_t *params = alloc(cparams_t);
        params->purity = *purity;
        params->warining = *warning;
        params->dump_ast = *dump_ast;
        
        compile_files(args->argv, args->argc, params);
    }

    return 0;
}
