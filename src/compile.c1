#use <conio>

struct cparams_t {
    bool purity;
    bool warining;
    bool dump_ast;
};
typedef struct cparams_t cparams_t;

void c_debug_tokens(vec_t *tokens) {
    for (int i = 0; i < v_length(tokens); i++) {
        l_token_t *token = (l_token_t *) v_get(tokens, i);
        printf(
            "(%d %d) %s: %c\n",
            token->row, token->col, token->str, token->type
        );
    }
}

string compile(vec_t *file_reprs, cparams_t *params) {
    for (int i = 0; i < v_length(file_reprs); i++) {
        fr_file_t *file = v_get(file_reprs, i);
        // TODO:
    }

    // c_debug_tokens(tokens);

    p_result_t *result = p_parse_tokens(tokens);
    if (!result->successful) {
        printf(
            "Line %d, Col %d: %s\n",
            result->err_row, result->err_col, result->err_msg
        );

        return "";
    }

    ast_program_t *prog = result->prog;
    if (params->dump_ast) {
        ap_print_program(prog);
    }
    
    println("Success");

    return "";
}