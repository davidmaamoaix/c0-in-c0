#use <conio>

struct cparams_t {
    bool purity;
    bool warining;
    bool dump_ast;
    string lib_path;
};
typedef struct cparams_t cparams_t;

struct c_result_t {
    string target_code;

    e_error_t *err;
    string failed_file;

    // when ran in debug/print mode and no target code is created
    bool no_output;
};
typedef struct c_result_t c_result_t;

c_result_t *__c_fail(e_error_t *err, string failed_file) {
    c_result_t *res = alloc(c_result_t);
    res->err = err;
    res->failed_file = failed_file;
    return res;
}

c_result_t *__c_exit() {
    c_result_t *res = alloc(c_result_t);
    res->no_output = true;
    return res;
}

void c_debug_tokens(vec_t *tokens) {
    for (int i = 0; i < v_length(tokens); i++) {
        l_token_t *token = (l_token_t *) v_get(tokens, i);
        printf(
            "(%d.%d-%d.%d) %s: %c\n",
            token->pos->start_row, token->pos->start_col,
            token->pos->end_row, token->pos->end_col,
            token->str, token->type
        );
    }
}

c_result_t *compile(vec_t *file_reprs, cparams_t *params) {
    for (int i = 0; i < v_length(file_reprs); i++) {
        fr_file_t *file = (fr_file_t *) v_get(file_reprs, i);
        e_error_t *err = l_tokenize(file);
        if (e_has_err(err)) return __c_fail(err, file->path);

        // c_debug_tokens(file->tokens);
    }

    om_map_t *type_ctx = p_empty_type_ctx();
    for (int i = 0; i < v_length(file_reprs); i++) {
        fr_file_t *file = (fr_file_t *) v_get(file_reprs, i);
        e_error_t *err = p_parse_file(file, type_ctx);
        if (e_has_err(err)) return __c_fail(err, file->path);
    }

    if (params->dump_ast) {
        for (int i = 0; i < v_length(file_reprs); i++) {
            fr_file_t *file = (fr_file_t *) v_get(file_reprs, i);

            printf("// AST OF FILE \"%s\"\n\n", file->path);

            for (int l = 0; l < v_length(file->libs); l++) {
                printf("#use <%s>\n", * (string *) v_get(file->libs, l));
            }
            if (v_length(file->libs) != 0) println("");

            au_print_program(file->ast);
        }

        return __c_exit();
    }
    
    println("Success");

    c_result_t *result = alloc(c_result_t);
    result->target_code = "";
    return result;
}