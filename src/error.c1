#use <string>

struct e_error_t {
    u_pos_t *pos; // can be NULL (in case position isn't valid)
    string err_msg;

    /*
        Error type enum (mainly for testing/integration purpose):

        General front-end error:
        - 2: lexer error
        - 3: parse error (syntax error)

        Semantic error:
        - 10: duplicate declaration (variable/field)
        - 11: duplicate declaration (struct)
        - 12: duplicate declaration (typedef)
        - 13: duplicate declaration (function)

        - 20: undefined variable/field
        - 21: undefined struct
        - 22: undefined typedef
        - 23: undefined function

        - 30: function call parameter mismatch (no. params mismatch)
        - 31: type mismatch
        - 32: requires small type
        - 33: invalid usage of `void`
        
        - 40: potential use of uninitialized variable
        - 41: missing return value
        - 42: misplaced break/continue
     */
    int err_type;
};
typedef struct e_error_t e_error_t;

e_error_t *e_create_error(int err_type, string err_msg, u_pos_t *pos) {
    e_error_t *err = alloc(e_error_t);
    err->pos = pos;
    err->err_type = err_type;
    err->err_msg = err_msg;

    return err;
}

bool e_has_err(e_error_t *err) {
    return err != NULL;
}

string e_format(e_error_t *err, string file_path) {
    if (err->pos == NULL) {
        return format("%s: skill issue: %s\n", file_path, err->err_msg);
    }

    return format(
        "%s: %d.%d-%d.%d: skill issue: %s\n",
        file_path,
        err->pos->start_row, err->pos->start_col,
        err->pos->end_row, err->pos->end_col,
        err->err_msg
    );
}
