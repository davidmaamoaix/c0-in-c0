#use <string>

struct e_error_t {
    u_pos_t *pos; // can be NULL (in case position isn't valid)
    string err_msg;
};
typedef struct e_error_t e_error_t;

e_error_t *e_create_error(string err_msg, u_pos_t *pos) {
    e_error_t *err = alloc(e_error_t);
    err->pos = pos;
    err->err_msg = err_msg;

    return err;
}

bool e_has_err(e_error_t *err) {
    return err != NULL;
}

string e_format(e_error_t *err, string file_path) {
    if (err->pos == NULL) {
        return format("%s: skill issue: %s\n", file_path, err->err_msg);
    }

    return format(
        "%s: %d.%d-%d.%d: skill issue: %s\n",
        file_path,
        err->pos->start_row, err->pos->start_col,
        err->pos->end_row, err->pos->end_col,
        err->err_msg
    );
}
