#use <file>

vec_t *__pt_read_lines(string path) {
    vec_t *lines = v_create_vector();
    file_t file = file_read(path);

    while (!file_eof(file)) {
        string line = file_readline(file);
        v_append_string(lines, string_join(line, "\n"));
    }

    return lines;
}

string __pt_seq_pos(vec_t *lines, fr_pos_t *pos) {
    // convert to 0-index
    int start_row = pos->start_row - 1;
    int end_row = pos->end_row - 1;

    string start = v_get_string(lines, start_row);
    string res = string_sub(start, pos->start_col - 1, string_length(start));
    for (int i = start_row + 1; i < end_row - 1; i++) {
        res = string_join(res, v_get_string(lines, i));
    }

    string end = v_get_string(lines, end_row);
    res = string_join(res, string_sub(end, 0, pos->end_col - 1));

    return res;
}

void __pt_test_func(vec_t *lines, ast_func_t *ast)  {
    
}

void __pt_test_struct(vec_t *lines, ast_struct_t *ast)  {

}

void __pt_test_file(string path) {
    vec_t *lines = __pt_read_lines(path);

    string code = "";

    for (int i = 0; i < v_length(lines); i++) {
        code = string_join(code, v_get_string(lines, i));
    }

    fr_file_t *file = alloc(fr_file_t);
    file->prog = code;

    e_error_t *err;

    err = l_tokenize(file);
    assert(!e_has_err(err));

    p_ctx_t *ctx = p_create_ctx(file->tokens, p_empty_type_ctx());
    err = p_parse_file(file, p_empty_type_ctx());
    assert(!e_has_err(err));

    for (int i = 0; i < v_length(file->ast->globs); i++) {
        ast_glob_t *glob = (ast_glob_t *) v_get(file->ast->globs, i);
        if (glob->type == 'F') {
            __pt_test_func(lines, glob->func);
        } else if (glob->type == 'S') {
            __pt_test_struct(lines, glob->struc);
        } else {
            //@assert(glob->type == 'T');
        }
    }
}

void pt_test_parser_pos() {
    __pt_test_file("samples/ast_jumbo.c0");
}
