struct p_ctx_t {
    // declarative information
    om_map_t *types;
    om_map_t *funcs;

    // token tracking
    int n_tokens;
    int pc;
    l_token_t *[] tokens;
};
typedef struct p_ctx_t p_ctx_t;

// BEGIN contracts

bool __p_is_ctx(p_ctx_t *ctx) {
    if (ctx == NULL) return false;
    if (!om_is_valid(ctx->types)) return false;
    if (!om_is_valid(ctx->funcs)) return false;

    if (ctx->n_tokens < 0) return false;
    if (!(0 <= ctx->pc && ctx->pc < ctx->n_tokens)) return false;
    //@assert ctx->n_tokens <= \length(ctx->tokens);

    return true;
}

// END contracts

// BEGIN constructors

p_ctx_t *p_create_ctx(int n_tokens, l_token_t *[] tokens)
//@ensures __p_is_ctx(\result);
{
    p_ctx_t *ctx = alloc(p_ctx_t);
    ctx->types = om_create_map();
    ctx->funcs = om_create_map();

    ctx->n_tokens = n_tokens;
    ctx->tokens = tokens;

    return ctx;
}

// END constructors

// BEGIN parsing stage

ast_program_t *parse_tokens(int n_tokens, l_token_t *[] tokens)
//@requires n_tokens <= \length(tokens);
{
    p_ctx_t *ctx = p_create_ctx(n_tokens, tokens);

    ast_program_t *prog = alloc(ast_program_t);

    return prog;
}

// END parsing stage
