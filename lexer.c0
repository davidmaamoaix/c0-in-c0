#use <string>
#use "regex.c0"

struct l_token_t {
    /*
        - K: keyword
        - L: literal
    */
    char type;
};
typedef struct l_token_t l_token_t;

string l_regex_or(string a, string b) {
    return format("%s|%s", a, b);
}

/*
    Tokenizes the given string and populates the tokens list. Returns the number
    of tokens.
*/
int l_tokenize(string code, l_token_t *[] tokens) {
    int size = 0;

    // pieces
    string R_NUM = "0|[1-9][0-9]*|0[xX][0-9a-fA-F]+";
    string R_ESC = "\\n|\\t|\\v|\\b|\\r|\\f|\\a|\\\\|\\\'|\\\"";
    string R_NCHAR = "[ !#-~]";
    string R_LCHAR = "[!-=?-~]";
    string R_SCHAR = l_regex_or(R_ESC, R_NCHAR);
    string R_CCHAR = l_regex_or(R_SCHAR, "\"|\\0");
    string R_STRLIT = format("\"%s*\"", R_SCHAR);
    string R_CHRLIT = format("'%s'", R_CCHAR);

    // actual keywords
    re_dfa_t *R_IDENTIFIER = re_parse_regex("[a-zA-Z_][a-zA-Z0-9_]*");
    re_dfa_t *R_SEP = re_parse_regex("[()[]{},;]");
    re_dfa_t *R_ASN_OP = re_parse_regex(
        "=|\\+=|-=|\\*=|/=|%=|<<=|>>=|&=|^=|\\|="
    );

    return size;
}
